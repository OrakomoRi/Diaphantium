name: Auto Build and Release

on:
    push:
        branches:
            - main
        paths:
            - "release/diaphantium.user.js"

permissions:
    contents: write

jobs:
    build-and-release:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Extract version from diaphantium.user.js
              id: extract_version
              run: |
                  version=$(grep -oP '@version\s+\K[\w.+-]+' release/diaphantium.user.js)
                  echo "VERSION=$version" >> $GITHUB_ENV
                  echo "version=$version" >> $GITHUB_OUTPUT

            - name: Check if version is stable (SemVer)
              id: check_stable
              run: |
                  # Official SemVer regex from semver.org
                  semver_regex='^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$'
                  
                  if [[ "$VERSION" =~ $semver_regex ]]; then
                    echo "is_stable=true" >> $GITHUB_OUTPUT
                    echo "✅ Version $VERSION is stable (matches SemVer)"
                  else
                    echo "is_stable=false" >> $GITHUB_OUTPUT
                    echo "ℹ️ Version $VERSION is not stable (dev/alpha/beta/rc)"
                  fi

            - name: Check if build for this version already exists
              id: check_build
              run: |
                  git fetch origin builds 2>/dev/null || echo "builds branch does not exist yet"
                  
                  if git ls-remote --heads origin builds | grep -q builds; then
                    git checkout builds
                    if [ -d "versions/$VERSION" ]; then
                      echo "exists=true" >> $GITHUB_OUTPUT
                      echo "Build for version $VERSION already exists, skipping."
                      exit 0
                    else
                      echo "exists=false" >> $GITHUB_OUTPUT
                    fi
                    git checkout main
                  else
                    echo "exists=false" >> $GITHUB_OUTPUT
                    echo "builds branch does not exist yet, will be created"
                  fi

            - name: Stop if build exists
              if: steps.check_build.outputs.exists == 'true'
              run: exit 0

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Install dependencies
              run: npm ci

            - name: Install Terser for minification
              run: npm install -g terser

            - name: Build diaphantium.min.js
              run: npm run build

            - name: Build userscript-utils.min.js
              run: |
                  # Concatenate all JS files from userscript folder
                  find userscript -name "*.js" -type f | sort | xargs cat > userscript-utils.js
                  
                  # Minify the concatenated file
                  terser userscript-utils.js -c -m -o userscript-utils.min.js
                  
                  # Clean up temporary file
                  rm userscript-utils.js
                  
                  echo "✅ Built userscript-utils.min.js"

            - name: Create version directory and copy builds
              run: |
                  mkdir -p "versions/$VERSION"
                  cp release/diaphantium.min.js "versions/$VERSION/"
                  cp userscript-utils.min.js "versions/$VERSION/"
                  echo "✅ Built files for version $VERSION"

            - name: Update stable.json (only for stable versions)
              if: steps.check_stable.outputs.is_stable == 'true'
              run: |
                  # Get commit info from main branch
                  git checkout main
                  COMMIT_HASH=$(git rev-parse HEAD)
                  COMMIT_DATE=$(git log -1 --format=%ad --date=short)
                  
                  # Switch to builds branch or create it
                  git fetch origin builds 2>/dev/null || true
                  if git ls-remote --heads origin builds | grep -q builds; then
                    git checkout builds
                  else
                    git checkout --orphan builds
                    git rm -rf . 2>/dev/null || true
                  fi
                  
                  # Create stable.json if it doesn't exist
                  mkdir -p .
                  if [ ! -f stable.json ]; then
                    echo '{"versions":[]}' > stable.json
                  fi
                  
                  # Check if this version already exists in stable.json
                  if ! grep -q "\"version\": \"$VERSION\"" stable.json 2>/dev/null; then
                    # Add new stable version using jq
                    # Link points to userscript via jsDelivr CDN
                    jq --arg version "$VERSION" \
                       --arg date "$COMMIT_DATE" \
                       --arg hash "$COMMIT_HASH" \
                       --arg link "https://cdn.jsdelivr.net/gh/OrakomoRi/Diaphantium@$COMMIT_HASH/release/diaphantium.user.js" \
                       '.versions += [{"version": $version, "date": $date, "hash": $hash, "link": $link}]' \
                       stable.json > stable_tmp.json
                    mv stable_tmp.json stable.json
                    
                    echo "✅ Added version $VERSION to stable.json"
                  else
                    echo "ℹ️ Version $VERSION already exists in stable.json"
                  fi

            - name: Push to builds branch
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  
                  # Ensure we're on builds branch
                  git fetch origin builds 2>/dev/null || true
                  if git ls-remote --heads origin builds | grep -q builds; then
                    git checkout builds
                  else
                    git checkout --orphan builds
                    git rm -rf . 2>/dev/null || true
                  fi
                  
                  # Copy built files from main
                  git checkout main -- versions
                  
                  # Copy stable.json if it was updated
                  if [ -f stable.json ]; then
                    git add stable.json
                  fi
                  
                  git add "versions/$VERSION"
                  
                  # Create commit message
                  if [ "${{ steps.check_stable.outputs.is_stable }}" == "true" ]; then
                    echo -e "$VERSION\nbuild: release artifacts (stable)" > commit-msg.txt
                  else
                    echo -e "$VERSION\nbuild: release artifacts" > commit-msg.txt
                  fi
                  
                  git commit -F commit-msg.txt || echo "No changes to commit"
                  git push origin builds

            - name: Create GitHub release (only for stable versions)
              if: steps.check_stable.outputs.is_stable == 'true'
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ env.VERSION }}
                  name: ${{ env.VERSION }}
                  body: |
                      ## Diaphantium ${{ env.VERSION }}
                      
                      Stable release built automatically.
                      
                      **Download:**
                      - [diaphantium.user.js](https://raw.githubusercontent.com/OrakomoRi/Diaphantium/main/release/diaphantium.user.js)
                      - [diaphantium.min.js](https://cdn.jsdelivr.net/gh/OrakomoRi/Diaphantium@${{ github.sha }}/versions/${{ env.VERSION }}/diaphantium.min.js)
                  files: |
                      versions/${{ env.VERSION }}/diaphantium.min.js
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
